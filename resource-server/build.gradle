plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
    id "com.bmuschko.docker-spring-boot-application" version "9.0.1"
    id 'nebula.integtest' version '9.6.2'
    id "com.dorongold.task-tree" version "2.1.0"
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import org.apache.commons.lang3.StringUtils

import static com.bmuschko.gradle.docker.DockerConventionJvmApplicationPlugin.DOCKERFILE_TASK_NAME

docker {
    springBootApplication {
        baseImage = 'eclipse-temurin:17-jdk-alpine'
        jvmArgs = ['-Xmx2048m', 'JAVA_OPTS']
    }
}
// Меняем форму ENTRYPOINT из exec в shell, чтобы прокинуть переменную JAVA_OPTS.
// Как альтернатива можно прокидывать переменную JAVA_TOOL_OPTIONS с флагами JVM
project.tasks.named(DOCKERFILE_TASK_NAME, Dockerfile).get().with {
    doFirst {
        List<Dockerfile.Instruction> origInstructions = new ArrayList<>(it.instructions.get())

        Dockerfile.EntryPointInstruction entryPoint =
                origInstructions.find { it.keyword == Dockerfile.EntryPointInstruction.KEYWORD } as Dockerfile.EntryPointInstruction

        origInstructions.set(origInstructions.indexOf(entryPoint), new ShellFormEntryPointInstruction(entryPoint))

        it.instructions.set(origInstructions)
    }
}

repositories {
    mavenCentral()
}

group = 'ru.alfabank.skillbox.examples'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springCloudVersion', "2021.0.3")
    set('testcontainersVersion', "1.17.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.apache.commons:commons-lang3:3.12.0"
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.vladmihalcea:hibernate-types-52:2.3.4'

    annotationProcessor 'org.projectlombok:lombok'

    // Unit test own dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // integration test own dependencies
    integTestImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock:2.1.3.RELEASE'
    integTestImplementation 'org.testcontainers:postgresql'
    integTestImplementation 'com.github.dasniko:testcontainers-keycloak:2.2.2'
    integTestRuntimeOnly 'com.h2database:h2'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('integrationTest') {
    useJUnitPlatform()
}

class ShellFormEntryPointInstruction implements Dockerfile.Instruction {

    private final String args

    final String keyword = 'ENTRYPOINT'

    ShellFormEntryPointInstruction(Dockerfile.EntryPointInstruction cmd) {
        args = StringUtils.strip(cmd.text - 'ENTRYPOINT ', '[]')
                .split(', ')
                .collect { StringUtils.strip(it, '"') }
                .join(' ')
    }

    @Override
    String getText() {
        return "ENTRYPOINT exec $args"
    }
}